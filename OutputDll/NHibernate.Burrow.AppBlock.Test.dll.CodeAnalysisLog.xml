<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="d:\program files (x86)\microsoft visual studio 10.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="10.0">
 <Namespaces>
  <Namespace Name="NHibernate.Burrow.AppBlock.Test">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'NHibernate.Burrow.AppBlock.Test' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="NHibernate.Burrow.AppBlock.Test.aReposEmul">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'NHibernate.Burrow.AppBlock.Test.aReposEmul' with another namespace.</Issue>
    </Message>
    <Message Id="a" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="85" Level="Error">Correct the casing of 'a' in namespace name 'NHibernate.Burrow.AppBlock.Test.aReposEmul' by changing it to 'A'.</Issue>
    </Message>
    <Message Id="Emul" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Emul' in namespace name 'NHibernate.Burrow.AppBlock.Test.aReposEmul'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="NHibernate.Burrow.AppBlock.Test.DynamicQuery">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'NHibernate.Burrow.AppBlock.Test.DynamicQuery' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="NHibernate.Burrow.AppBlock.Test.Serialization">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'NHibernate.Burrow.AppBlock.Test.Serialization' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="NHibernate.Burrow.AppBlock.Test.SoftDelete">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'NHibernate.Burrow.AppBlock.Test.SoftDelete' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="NHibernate.Burrow.AppBlock.Test.Transform">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'NHibernate.Burrow.AppBlock.Test.Transform' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="NHibernate.Burrow.AppBlock.Test.UserTypes">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'NHibernate.Burrow.AppBlock.Test.UserTypes' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="D:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\OutputDll\NHibernate.Burrow.AppBlock.Test.dll">
   <Modules>
    <Module Name="nhibernate.burrow.appblock.test.dll">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'NHibernate.Burrow.AppBlock.Test.dll' with a strong name key.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithComVisible" Category="Microsoft.Design" CheckId="CA1017" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="NonBreaking">
       <Issue Name="NoAttribute" Certainty="95" Level="CriticalError">Because 'NHibernate.Burrow.AppBlock.Test.dll' exposes externally visible types, mark it with ComVisible(false) at the assembly level and then mark all types within the assembly that should be exposed to COM clients with ComVisible(true).</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="NHibernate.Burrow.AppBlock.Test">
       <Types>
        <Type Name="TestCase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test" File="TestCase.cs" Line="19">Initialize all static fields in 'TestCase' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#cfg" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'TestCase.cfg' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="cfg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'cfg' in member name 'TestCase.cfg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Configure(NHibernate.Cfg.Configuration)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test" File="TestCase.cs" Line="215">In externally visible method 'TestCase.Configure(Configuration)', validate parameter 'configuration' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSetUp()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="SetUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test" File="TestCase.cs" Line="84">The compound word 'SetUp' in member name 'TestCase.OnSetUp()' exists as a discrete term. If your usage is intended to be single word, case it as 'Setup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnTearDown()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="TearDown" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test" File="TestCase.cs" Line="96">The compound word 'TearDown' in member name 'TestCase.OnTearDown()' exists as a discrete term. If your usage is intended to be single word, case it as 'Teardown' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#sessions" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'TestCase.sessions' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetUp()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SetUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test" File="TestCase.cs" Line="93">The compound word 'SetUp' in member name 'TestCase.SetUp()' exists as a discrete term. If your usage is intended to be single word, case it as 'Setup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TearDown()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TearDown" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test" File="TestCase.cs" Line="105">The compound word 'TearDown' in member name 'TestCase.TearDown()' exists as a discrete term. If your usage is intended to be single word, case it as 'Teardown' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="NUnit.Framework.Assert.Fail(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test" File="TestCase.cs" Line="114">Method 'TestCase.TearDown()' passes a literal string as parameter 'message' of a call to 'Assert.Fail(string)'. Retrieve the following string(s) from a resource table instead: "Test didn\'t clean up after itself".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TestFixtureSetUp()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SetUp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test" File="TestCase.cs" Line="57">The compound word 'SetUp' in member name 'TestCase.TestFixtureSetUp()' exists as a discrete term. If your usage is intended to be single word, case it as 'Setup' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TestFixtureTearDown()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TearDown" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test" File="TestCase.cs" Line="80">The compound word 'TearDown' in member name 'TestCase.TestFixtureTearDown()' exists as a discrete term. If your usage is intended to be single word, case it as 'Teardown' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="NHibernate.Burrow.AppBlock.Test.aReposEmul">
       <Types>
        <Type Name="GenericNHibernateDAO`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="DAO" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'DAO' in type name 'GenericNHibernateDAO&lt;T, TId&gt;' by changing it to 'Dao'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Find(NHibernate.Criterion.DetachedCriteria)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\aReposEmul" File="GenericNHibernateDAO.cs" Line="68">In externally visible method 'GenericNHibernateDAO&lt;T, TId&gt;.Find(DetachedCriteria)', validate parameter 'criteria' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Find(NHibernate.IDetachedQuery)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\aReposEmul" File="GenericNHibernateDAO.cs" Line="73">In externally visible method 'GenericNHibernateDAO&lt;T, TId&gt;.Find(IDetachedQuery)', validate parameter 'query' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindUnique(NHibernate.Criterion.DetachedCriteria)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\aReposEmul" File="GenericNHibernateDAO.cs" Line="78">In externally visible method 'GenericNHibernateDAO&lt;T, TId&gt;.FindUnique(DetachedCriteria)', validate parameter 'criteria' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindUnique(NHibernate.IDetachedQuery)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\aReposEmul" File="GenericNHibernateDAO.cs" Line="83">In externally visible method 'GenericNHibernateDAO&lt;T, TId&gt;.FindUnique(IDetachedQuery)', validate parameter 'query' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPaginable(NHibernate.Criterion.DetachedCriteria)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Paginable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\aReposEmul" File="GenericNHibernateDAO.cs" Line="90">Correct the spelling of 'Paginable' in member name 'GenericNHibernateDAO&lt;T, TId&gt;.GetPaginable(DetachedCriteria)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPaginable(NHibernate.IDetachedQuery)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Paginable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\aReposEmul" File="GenericNHibernateDAO.cs" Line="100">Correct the spelling of 'Paginable' in member name 'GenericNHibernateDAO&lt;T, TId&gt;.GetPaginable(IDetachedQuery)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="NHibernate.Burrow.AppBlock.Test.DynamicQuery">
       <Types>
        <Type Name="DetachedDynQueryFixture" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Dyn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Dyn' in type name 'DetachedDynQueryFixture'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ToRowCount()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\DynamicQuery" File="DetachedDynQueryFixture.cs" Line="16">The 'this' parameter (or 'Me' in Visual Basic) of 'DetachedDynQueryFixture.ToRowCount()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DynQueryFixture" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Dyn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Dyn' in type name 'DynQueryFixture'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CommonUse()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\DynamicQuery" File="DynQueryFixture.cs" Line="13">The 'this' parameter (or 'Me' in Visual Basic) of 'DynQueryFixture.CommonUse()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DirtyWhereCostruction()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Costruction" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\DynamicQuery" File="DynQueryFixture.cs" Line="47">Correct the spelling of 'Costruction' in member name 'DynQueryFixture.DirtyWhereCostruction()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\DynamicQuery" File="DynQueryFixture.cs" Line="47">The 'this' parameter (or 'Me' in Visual Basic) of 'DynQueryFixture.DirtyWhereCostruction()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LogicalExpressionTest()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\DynamicQuery" File="DynQueryFixture.cs" Line="59">The 'this' parameter (or 'Me' in Visual Basic) of 'DynQueryFixture.LogicalExpressionTest()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OrderByInjection()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\DynamicQuery" File="DynQueryFixture.cs" Line="68">The 'this' parameter (or 'Me' in Visual Basic) of 'DynQueryFixture.OrderByInjection()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OrderByTest()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\DynamicQuery" File="DynQueryFixture.cs" Line="78">The 'this' parameter (or 'Me' in Visual Basic) of 'DynQueryFixture.OrderByTest()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SelectTest()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\DynamicQuery" File="DynQueryFixture.cs" Line="86">The 'this' parameter (or 'Me' in Visual Basic) of 'DynQueryFixture.SelectTest()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SelectWhereTest()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\DynamicQuery" File="DynQueryFixture.cs" Line="94">The 'this' parameter (or 'Me' in Visual Basic) of 'DynQueryFixture.SelectWhereTest()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SimpleQuery()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\DynamicQuery" File="DynQueryFixture.cs" Line="105">The 'this' parameter (or 'Me' in Visual Basic) of 'DynQueryFixture.SimpleQuery()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WhereInjection()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\DynamicQuery" File="DynQueryFixture.cs" Line="115">The 'this' parameter (or 'Me' in Visual Basic) of 'DynQueryFixture.WhereInjection()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="NHibernate.Burrow.AppBlock.Test.Pagination">
       <Types>
        <Type Name="BasePaginatorFixture" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Paginator" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Paginator' in type name 'BasePaginatorFixture'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GotoOutOfPages()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Pagination" File="BasePaginatorFixture.cs" Line="25">The 'this' parameter (or 'Me' in Visual Basic) of 'BasePaginatorFixture.GotoOutOfPages()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#KnowLastPage()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Pagination" File="BasePaginatorFixture.cs" Line="32">The 'this' parameter (or 'Me' in Visual Basic) of 'BasePaginatorFixture.KnowLastPage()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NoPageAvailable()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Pagination" File="BasePaginatorFixture.cs" Line="57">The 'this' parameter (or 'Me' in Visual Basic) of 'BasePaginatorFixture.NoPageAvailable()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnknowLastPage()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Unknow" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Pagination" File="BasePaginatorFixture.cs" Line="70">Correct the spelling of 'Unknow' in member name 'BasePaginatorFixture.UnknowLastPage()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Pagination" File="BasePaginatorFixture.cs" Line="70">The 'this' parameter (or 'Me' in Visual Basic) of 'BasePaginatorFixture.UnknowLastPage()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Foo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Foo" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Foo' in type name 'Foo'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="NamedQueryRowsCounterFixture" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#totalFoo" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="total" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'total' in member name 'NamedQueryRowsCounterFixture.totalFoo' by changing it to 'Total'.</Issue>
            </Message>
            <Message Id="Foo" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Foo' in member name 'NamedQueryRowsCounterFixture.totalFoo' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NoFoo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Foo" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Foo' in type name 'NoFoo'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="NoFooPaginable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ComVisibleTypeBaseTypesShouldBeComVisible" Category="Microsoft.Interoperability" CheckId="CA1405" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
           <Issue Certainty="90" Level="Error">'NoFooPaginable' is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: 'PaginableQuery&lt;NoFoo&gt;', 'AbstractPaginableQuery&lt;NoFoo&gt;'</Issue>
          </Message>
          <Message Id="Foo" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Foo' in type name 'NoFooPaginable'.</Issue>
          </Message>
          <Message Id="Paginable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Paginable' in type name 'NoFooPaginable'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(NHibernate.ISession,NHibernate.IDetachedQuery)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Pagination" File="NoFooPaginable.cs" Line="13">In externally visible method 'NoFooPaginable.NoFooPaginable(ISession, IDetachedQuery)', validate parameter 'detachedQuery' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PaginableCriteriaFixture" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Paginable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Paginable' in type name 'PaginableCriteriaFixture'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#NullArgumentNotAllowed()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Framework.Assert.Fail(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Pagination" File="PaginableCriteriaFixture.cs" Line="112">Method 'PaginableCriteriaFixture.NullArgumentNotAllowed()' passes a literal string as parameter 'message' of a call to 'Assert.Fail(string)'. Retrieve the following string(s) from a resource table instead: "No exception for null argument.".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Pagination" File="PaginableCriteriaFixture.cs" Line="120">Method 'PaginableCriteriaFixture.NullArgumentNotAllowed()' passes a literal string as parameter 'message' of a call to 'Assert.Fail(string)'. Retrieve the following string(s) from a resource table instead: "No exception for null argument.".</Issue>
            </Message>
            <Message Id="NHibernate.Burrow.AppBlock.GenericImpl.PaginableCriteria`1&lt;NHibernate.Burrow.AppBlock.Test.Pagination.Foo&gt;" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="NonBreaking">
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Pagination" File="PaginableCriteriaFixture.cs" Line="111">'PaginableCriteriaFixture.NullArgumentNotAllowed()' creates a new instance of 'PaginableCriteria&lt;Foo&gt;' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Pagination" File="PaginableCriteriaFixture.cs" Line="119">'PaginableCriteriaFixture.NullArgumentNotAllowed()' creates a new instance of 'PaginableCriteria&lt;Foo&gt;' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaginableRowsCount()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Paginable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Pagination" File="PaginableCriteriaFixture.cs" Line="129">Correct the spelling of 'Paginable' in member name 'PaginableCriteriaFixture.PaginableRowsCount()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#totalFoo" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="total" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'total' in member name 'PaginableCriteriaFixture.totalFoo' by changing it to 'Total'.</Issue>
            </Message>
            <Message Id="Foo" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Foo' in member name 'PaginableCriteriaFixture.totalFoo' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PaginableQueryFixture" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Paginable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Paginable' in type name 'PaginableQueryFixture'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#NullArgumentNotAllowed()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NUnit.Framework.Assert.Fail(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Pagination" File="PaginableQueryFixture.cs" Line="116">Method 'PaginableQueryFixture.NullArgumentNotAllowed()' passes a literal string as parameter 'message' of a call to 'Assert.Fail(string)'. Retrieve the following string(s) from a resource table instead: "No exception for null argument.".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Pagination" File="PaginableQueryFixture.cs" Line="124">Method 'PaginableQueryFixture.NullArgumentNotAllowed()' passes a literal string as parameter 'message' of a call to 'Assert.Fail(string)'. Retrieve the following string(s) from a resource table instead: "No exception for null argument.".</Issue>
            </Message>
            <Message Id="NHibernate.Burrow.AppBlock.GenericImpl.PaginableQuery`1&lt;NHibernate.Burrow.AppBlock.Test.Pagination.Foo&gt;" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="NonBreaking">
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Pagination" File="PaginableQueryFixture.cs" Line="115">'PaginableQueryFixture.NullArgumentNotAllowed()' creates a new instance of 'PaginableQuery&lt;Foo&gt;' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Pagination" File="PaginableQueryFixture.cs" Line="123">'PaginableQueryFixture.NullArgumentNotAllowed()' creates a new instance of 'PaginableQuery&lt;Foo&gt;' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PaginableRowsCount()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Paginable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Pagination" File="PaginableQueryFixture.cs" Line="133">Correct the spelling of 'Paginable' in member name 'PaginableQueryFixture.PaginableRowsCount()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#totalFoo" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="total" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'total' in member name 'PaginableQueryFixture.totalFoo' by changing it to 'Total'.</Issue>
            </Message>
            <Message Id="Foo" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Foo' in member name 'PaginableQueryFixture.totalFoo' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PaginatorFixture" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Paginator" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Paginator' in type name 'PaginatorFixture'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#SimplePaginator()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Paginator" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Pagination" File="PaginatorFixture.cs" Line="133">Correct the spelling of 'Paginator' in member name 'PaginatorFixture.SimplePaginator()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#totalFoo" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="total" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'total' in member name 'PaginatorFixture.totalFoo' by changing it to 'Total'.</Issue>
            </Message>
            <Message Id="Foo" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Foo' in member name 'PaginatorFixture.totalFoo' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="QueryRowsCounterFixture" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#totalFoo" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="total" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'total' in member name 'QueryRowsCounterFixture.totalFoo' by changing it to 'Total'.</Issue>
            </Message>
            <Message Id="Foo" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Foo' in member name 'QueryRowsCounterFixture.totalFoo' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="NHibernate.Burrow.AppBlock.Test.Serialization">
       <Types>
        <Type Name="Foo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Foo" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Foo' in type name 'Foo'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Children" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Serialization" File="Foo.cs" Line="61">Change 'Foo.Children' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#nonSerializablefield" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Foo.nonSerializablefield' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Serializablefield" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Serializablefield' in member name 'Foo.nonSerializablefield' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FooChild" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Foo" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Foo' in type name 'FooChild'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="SerializeFixture" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Clone()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Serialization" File="ClonerFixture.cs" Line="12">The 'this' parameter (or 'Me' in Visual Basic) of 'SerializeFixture.Clone()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="NHibernate.Burrow.AppBlock.Test.SoftDelete">
       <Types>
        <Type Name="SoftDeleteFixture" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DeletedSoftDeleteEntitiesAreNotReallyDeleted()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.DateTime.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\SoftDelete" File="SoftDeleteFixture.cs" Line="64">Because the behavior of 'DateTime.Parse(string)' could vary based on the current user's locale settings, replace this call in 'SoftDeleteFixture.DeletedSoftDeleteEntitiesAreNotReallyDeleted()' with a call to 'DateTime.Parse(string, IFormatProvider)'. If the result of 'DateTime.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\SoftDelete" File="SoftDeleteFixture.cs" Line="82">Because the behavior of 'DateTime.Parse(string)' could vary based on the current user's locale settings, replace this call in 'SoftDeleteFixture.DeletedSoftDeleteEntitiesAreNotReallyDeleted()' with a call to 'DateTime.Parse(string, IFormatProvider)'. If the result of 'DateTime.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SoftDeleter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Deleter" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Deleter' in type name 'SoftDeleter'.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="NHibernate.Burrow.AppBlock.Test.Transform">
       <Types>
        <Type Name="PosToBeanResultTransformer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ConstructorInvalidAliases()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NHibernate.Burrow.AppBlock.Transform.PositionalToBeanResultTransformer" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="NonBreaking">
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Transform" File="PosToBeanResultTransformer.cs" Line="37">'PosToBeanResultTransformer.ConstructorInvalidAliases()' creates a new instance of 'PositionalToBeanResultTransformer' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Transform" File="PosToBeanResultTransformer.cs" Line="37">The 'this' parameter (or 'Me' in Visual Basic) of 'PosToBeanResultTransformer.ConstructorInvalidAliases()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConstructorInvalidType()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NHibernate.Burrow.AppBlock.Transform.PositionalToBeanResultTransformer" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="NonBreaking">
             <Issue Name="ObjectCreation" Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Transform" File="PosToBeanResultTransformer.cs" Line="44">'PosToBeanResultTransformer.ConstructorInvalidType()' creates a new instance of 'PositionalToBeanResultTransformer' which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Transform" File="PosToBeanResultTransformer.cs" Line="44">The 'this' parameter (or 'Me' in Visual Basic) of 'PosToBeanResultTransformer.ConstructorInvalidType()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Setters()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Transform" File="PosToBeanResultTransformer.cs" Line="50">The 'this' parameter (or 'Me' in Visual Basic) of 'PosToBeanResultTransformer.Setters()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TupleDifferentScalars()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\SourceCode\OpenSource\GitStuff\nhibernate.burrow-custom\src\NHibernate.Burrow.AppBlock.Test\Transform" File="PosToBeanResultTransformer.cs" Line="69">The 'this' parameter (or 'Me' in Visual Basic) of 'PosToBeanResultTransformer.TupleDifferentScalars()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="NHibernate.Burrow.AppBlock.Test.UserTypes">
       <Types>
        <Type Name="Foo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Foo" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-12-04 14:21:14Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Foo' in type name 'Foo'.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
   <Name>Avoid namespaces with few types</Name>
   <Description>A namespace should generally have more than five types.</Description>
   <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182130(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227">
   <Name>Collection properties should be read only</Name>
   <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
   <Resolution Name="Default">Change {0} to be read-only by removing the property setter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182327(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="ComVisibleTypeBaseTypesShouldBeComVisible" Category="Microsoft.Interoperability" CheckId="CA1405">
   <Name>COM visible type base types should be COM visible</Name>
   <Description>COM visible types should have an object hierarchy that is uniformly COM visible.</Description>
   <Resolution Name="Default">{0} is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182202(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberShouldBeDiscreteTerm">The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806">
   <Name>Do not ignore method results</Name>
   <Description>The result of methods that return new instances of strings should be assigned to a variable and subsequently used. If the result of a method that creates a new object, such as String.ToLower(), is not assigned to a variable, the call is wasted.</Description>
   <Resolution Name="ObjectCreation">{0} creates a new instance of {1} which is never used. Pass the instance as an argument to another method, assign the instance to a variable, or remove the object creation if it is unnecessary.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182273(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="Namespace">Correct the casing of '{0}' in namespace name '{1}' by changing it to '{2}'.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810">
   <Name>Initialize reference type static fields inline</Name>
   <Description>Static fields should be initialized when declared. Initializing static data in explicit static constructors results in less performant code.</Description>
   <Resolution Name="Default">Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182275(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">CriticalWarning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithComVisible" Category="Microsoft.Design" CheckId="CA1017">
   <Name>Mark assemblies with ComVisibleAttribute</Name>
   <Description>The System.Runtime.InteropServices.ComVisible attribute indicates whether COM clients can use the library. Good design dictates that developers explicitly indicate COM visibility. The default value for this attribute is 'true'. However, the best design is to mark the assembly ComVisible false, and then mark types, interfaces, and individual members as ComVisible true, as appropriate.</Description>
   <Resolution Name="NoAttribute">Because {0} exposes externally visible types, mark it with ComVisible(false) at the assembly level and then mark all types within the assembly that should be exposed to COM clients with ComVisible(true).</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182157(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError, Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
